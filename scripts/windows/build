#!/bin/bash

cmake_platform='Windows'
case_insensitive_fs=1
convert_man_to_text=1
allow_symlinks=0
library_pattern='*.dll'
objdump_lib_pattern='DLL Name: '
exe_suffix='.exe'
text_suffix='.txt'

create_launcher() {
	local wrapper="$1"
	local cmdline="$2"
	
	local target="${targets[windows-i686]}"
	
	local args=( )
	local here='@@HERE@@'
	eval "args=( $cmdline )"
	local command="${args[0]}"
	command="${command%.exe}.exe"
	
	local scommand="$(printf '%s' "${command%.exe}" | tr - _)"
	
	local prefix_path="${bindir}/${architectures[0]}"
	local prefix_files=(
		$(find "$prefix_path" -maxdepth 1 -executable -type f ! -name "$library_pattern")
	)
	
	local binary=""
	for arch in x86 x64 ; do
		eval "local have_$arch=0"
		[ -f "${bindir}/${arch}/${command}" ] || continue
		eval "have_$arch=1"
		[ -z "$binary" ] || continue
		binary="${bindir}/${arch}/${command}"
		while [ -L "$binary" ] ; do
			local linktarget="$(readlink "$binary")"
			command="${linktarget#'libexec/'}"
			binary="${bindir}/${arch}/${linktarget}"
		done
	done
	[ -f "$binary" ] || die "missing ${bindir}/(x86|x64)/$command"
	
	local wrapper_options=(
		-static-libgcc
		-s
		-Os
		-flto
		-fdata-sections
		-ffunction-sections
		-fmerge-all-constants
		-fno-asynchronous-unwind-tables
		-fno-ident
		-fno-stack-protector
		-fno-unwind-tables
		-fomit-frame-pointer
		-fuse-linker-plugin
		-fvisibility=hidden
		-fwhole-program
		-falign-functions=1
		-mpreferred-stack-boundary=2
		-falign-jumps=1
		-falign-loops=1
		-Wl,--gc-sections
		-Wl,--build-id=none
		-Wl,--as-needed
		-Wl,--disable-reloc-section
		-nostdlib
		-lkernel32
		-lshell32
		-Wl,--script="$scriptdir/i386pe.x"
		-Wl,--entry='_start'
		-DUNICODE
		-D_UNICODE
		-DLAUNCHER_COMMAND="$command"
		-DLAUNCHER_SCOMMAND="$scommand"
		-DHAVE_X86="$have_x86"
		-DHAVE_X64="$have_x64"
	)
	
	local builddir="${buildroot}/build-wrapper-${wrapper##*/}"
	e mkdir -p "$builddir"
	
	# Select between GUI and console subsystems
	local copy_resources=0
	case "$(file "$binary")" in
		*' executable (GUI)'*) wrapper_options+=( -mwindows ) ; copy_resources=1 ;;
		*' executable (console)'*) ;;
		*) die "Unknown binary type: $binary: $(file "$binary")"
	esac
	
	if [ "${#args[@]}" -gt 1 ] ; then
		local launcher_args='';
		for arg in "${args[@]:1}" ; do
			launcher_args+=' LAUNCHER_ARG_BEGIN();'
			echo ":$arg"
			while true ; do
				local text="${arg%%"@@HERE@@"*}"
				arg="${arg#"$text"}"
				echo "'$text' '$arg'"
				if [ ! -z "$text" ] ; then
					text="$(
						printf '%s' "$text" | sed 's:/:\\:g' | sed 's:\([\\"]\):\\\1:g'
					)"
					launcher_args+=" LAUNCHER_ARG_TEXT(L\"$text\");"
				fi
				[ -z "$arg" ] && break
				arg="${arg#"@@HERE@@"}"
				launcher_args+=' LAUNCHER_ARG_HERE();'
			done
			launcher_args+=' LAUNCHER_ARG_END();'
		done
		wrapper_options+=( -DLAUNCHER_ARGS="$launcher_args" )
	fi
	
	# Copy resources (icons) to the wrapper
	if [ $copy_resources = 1 ] ; then
		local resources="$builddir/resources.obj"
		e "$target-windres" "$binary" -O coff -o "$resources" 2>&1
		[ -f "$resources" ] && wrapper_options+=( "$resources" )
	fi
	
	e "$target-gcc" "$scriptdir/launcher.c" -o "$wrapper" "${wrapper_options[@]}"
}

create_wrapper() {
	local wrapper="$1"
	create_launcher "$wrapper" "\"\${wrapper##*/}\""
}

. "${BASH_SOURCE[0]%/*}/../build"
