#!/bin/bash

curscript="${BASH_SOURCE[1]}"
. "${BASH_SOURCE[0]%/*}/common"

# Set default target configutation
library_pattern="${library_pattern:-"*.so*"}"
case_insensitive_fs="${case_insensitive_fs:-0}"
convert_man_to_text="${convert_man_to_text:-0}"
create_wrapper_scripts="${create_wrapper_scripts:-1}"
objdump_lib_pattern="${objdump_lib_pattern:-" NEEDED "}"
exe_suffix="${exe_suffix-}"
text_suffix="${text_suffix-}"
allow_symlinks="${allow_symlinks:-1}"

# Remove obsolete test results
_phony="${builddir}/done/${project}-${version}-${pkgtype}-test"
[ -f "$_phony" ] && rm "$_phony"

# Extract the source tarball
get_output _source _sourcedir "$version" 'source'
e mkdir source
pushd source
	e extract "${_source}"
	sourcedir="${PWD}/${_sourcedir}"
popd

# Set output directories
get_output _out _outdir
get_output _debug _debugdir "$version" "$pkgtype-debug"
buildroot="${PWD}"
outdir="${PWD}/${_outdir}"
debugdir="${PWD}/${_debugdir}"
bindir="${outdir}/bin"
mandir="${outdir}/doc"
readme="${outdir}/README${text_suffix}"
requirements_file="${outdir}/REQUIREMENTS${text_suffix}"
e mkdir "${outdir}"

# Run build scripts
for script in "$scriptdir/build.d/"* ; do
	_scriptname="${scriptpkgdir}/build.${script##*-}"
	[ -f "${_scriptname}.pre" ] && . "${_scriptname}.pre"
	. "$script"
	[ -f "$_scriptname" ] && . "$_scriptname"
done

# Update file list
_manfiest="${projectdir}/manifest/files.${pkgtype}"
if [ $is_test_version = 0 ] && [ -f "${_manfiest}" ] ; then
	[ -d "${projectdir}/manifest" ] || e mkdir "${projectdir}/manifest"
	_oldfiles="$(cat "${_manfiest}")"
	_newfiles="$(cd "${_outdir}" && find . -type d -exec sh -c 'printf "%s/\n" "$0"' {} \; -or -print | sed 's:^./::')"
	printf "%s\n%s\n" "$_oldfiles" "$_newfiles" | grep '.' | sort -u > "${_manfiest}"
fi

# Create the binary tarball
echo "  ${white}:: creating archive${reset}" >&2
make_archive "${_debug}" "${_debugdir}"
make_archive "${_out}" "${_outdir}"

echo >&2
