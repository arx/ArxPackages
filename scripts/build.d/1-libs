#!/bin/bash

## Get required libraries and generate dependency info

echo "  ${white}:: collecting dependencies${reset}" >&2


extract_debug_symbols() {
	local arch="$1"
	
	local builddir="${buildroot}/build-${arch}"
	local bindir="${bindir}/${arch}"
	local debugdir="${debugdir}/${arch}"
	
	e mkdir -p "$debugdir"
	
	local target="${targets["${pkgtype}-${arch}"]:-}"
	local toolchain="${toolchains["${pkgtype}-${arch}"]:-}"
	
	for binary in "${bindir}"/* "${bindir}"/libexec/* ; do
		[ -f "$binary" ] || continue
		[[ "$binary" == *.h ]] && continue
		[ -L "${binary}" ] && continue
		
		local name="${binary##*/}"
		
		if [ ! -z "$target" ] ; then
			local debugname="$name.debug"
			pushd "${binary%/*}"
				e "$target"-objcopy --only-keep-debug "$binary" "${debugname}"
				e "$target"-strip "$binary"
				e "$target"-objcopy --add-gnu-debuglink="${debugname}" "$binary"
				e mv "${debugname}" "${debugdir}/${debugname}"
			popd
		else
			local debugname="${name%.*}.pdb"
			local candidate="$(
				find "$builddir" -mindepth 1 -type f -iname "$debugname" || true
			)"
			if [ -f "$candidate" ] ; then
				e cp "$candidate" "${debugdir}/${debugname}"
			elif [[ ! "$name" == *.exe ]] ; then
				continue
			fi
		fi
		
		[ -f "${debugdir}/${debugname}" ] \
			|| die "missing debug symbols for ${arch} ${name} (${debugname})"
		
	done
	
}


has_library() {
	local bindir="$1"
	local lib="$2"
	[ -d "$bindir" ] || return $false
	if [ "$case_insensitive_fs" = 1 ] ; then
		local candidate="$(
			find "${bindir}" -mindepth 1 -maxdepth 1 -type f -iname "$lib" || true
		)"
		[ ! -z "$candidate" ] && [ -f "$candidate" ] && return $true
		if [ -d "${bindir}/libexec" ] ; then
			local candidate="$(
				find "${bindir}/libexec" -mindepth 1 -maxdepth 1 -type f -iname "$lib" || true
			)"
			[ ! -z "$candidate" ] && [ -f "$candidate" ] && return $true
		fi
	else
		[ -f "${bindir}/${lib}" ] && return $true
		[ -f "${bindir}/libexec/${lib}" ] && return $true
	fi
	return $false
}

do_copy_binary() {
	local f="$1"
	local dest="$2"
	
	# Prefer our own binaries/libs
	has_library "$bindir" "$f" && return
	has_library "$dest" "$f" && return
	
	e mkdir -p "${dest}/libexec"
	e cp -a "$f" "${dest}/libexec/"
}

do_inherit_project() {
	local src_project="$1"
	
	# Get the latest tarball of the source project
	local src="$( "${scriptdir}/latest" --project="$src_project" --pkgtype="$pkgtype" )"
	if [ -z "$src" ] || [ ! -f "$src" ] ; then
		die "could not find any ${pkgtype} build of ${src_project}"
	fi
	local name="${src##*/}"
	local dirname="${name%.*}"
	dirname="${dirname%.tar}"
	
	e mkdir -p inherit
	pushd "inherit"
		
		# Extract the source tarball
		e extract "$src"
		e cd "$dirname"
		
		# Copy binaries
		pushd bin
			for f in * ; do
				if [ -d "$f" ] ; then
					# Don't include architectures we don't support ourselves
					[ -d "${bindir}/${f}" ] || continue
					pushd "$f"
						for binary in * ; do
							# Copy arch-dependent binary/library
							[ ! -d "$f" ] && e do_copy_binary "$binary" "${bindir}/${f}"
						done
					popd
				else
					# Copy arch-independent script
					e do_copy_binary "$f" "$bindir"
				fi
			done
		popd
		
		# Copy license files
		local license_outdir="${outdir}/license"
		pushd license
			for license in * ; do
				[ -e "${license_outdir}/${license}" ] && continue
				e cp -a "$license" "$license_outdir"/
			done
		popd
		
	popd
	
}

# find_libraries <bindir> <binary>
find_libraries() {
	
	local bindir="$1"
	local binary="$2"
	local binname="${binary##*/}"
	
	[ -x "$(which objdump)" ] || die "missing objdump"
	
	# Get all libraries required by the binary
	local all_libraries=(
		$(objdump -p "$binary" \
			| grep -P "$objdump_lib_pattern" | sed 's/.* //' | sort | uniq)
	)
	echo "${binname}: all libs: ${all_libraries[*]:+${all_libraries[*]}}"
	
	# Filter base system libraries
	local libraries=( )
	for lib in "${all_libraries[@]:+${all_libraries[@]}}" ; do
		
		llib="$lib"
		[ "$case_insensitive_fs" = 1 ] && llib="$(echo "$lib" | tolower)"
		
		match_in_array "$llib" "${system_libraries[@]:+${system_libraries[@]}}" && continue
		
		match_in_array "$llib" "${forbidden_libraries[@]:+${forbidden_libraries[@]}}" \
			&& die "${arch} ${binname} links to blacklisted library ${lib}"
		
		libraries+=( "$lib" )
	done
	echo "${binname}: user libs: ${libraries[*]:+${libraries[*]}}"
	
	# Check that the runpath is set correctly
	if [ $has_elf_rpath = 1 ] && [ "${#libraries[@]}" -gt 0 ] && [[ "$binname" != *.so* ]] ; then
		local runpath="$(
			readelf -d "$binary" \
				| grep ' (RUNPATH) ' | sed 's/^.*\[\([^]]*\)\]$/\1/' || true
		)"
		[ "$runpath" = "\$ORIGIN" ] \
			|| die "${arch} ${binname} does not have runpath set to \$ORIGIN: \"$runpath\""
	fi
	
	for lib in "${libraries[@]:+${libraries[@]}}" ; do
		
		# Don't get the library again if we already have it
		has_library "$bindir" "$lib" && continue
		
		# Find the required library file
		local file=''
		for binroot in "${binroots[@]:+${binroots[@]}}" ; do
			for suffix in "${suffixes[@]}" ; do
				[ -d "${binroot}/${suffix}" ] || continue
				if [ "$case_insensitive_fs" = 1 ] ; then
					local candidate="$(
						find "${binroot}/${suffix}" -mindepth 1 -maxdepth 1 -type f -iname "$lib" || true
					)"
				else
					local candidate="${binroot}/${suffix}/${lib}"
				fi
				[ -z "$candidate" ] && continue
				[ -f "$candidate" ] || continue
				file="$candidate"
				break
			done
			[ -z "$file" ] || break
		done
		if [ -z "$file" ] && [ -z "$toolchain" ] ; then
			local candidate="$("${target}-g++" -print-file-name="$lib")"
			[ -f "$candidate" ] && file="$candidate"
		fi
		[ -z "$file" ] && die "could not find ${lib} (required by ${arch} ${binname})"
		echo "${lib}: using ${file}"
		
		# Resolve symlinks
		if [ -L "$file" ] ; then
			local link_target="$(readlink -f "$file")"
			local targetlib="${link_target##*/}"
			if [ ! "$targetlib" = "$lib" ] ; then
				e ln -sT "$targetlib" "${bindir}/${lib}"
				lib="$targetlib"
				has_library "$bindir" "$lib" && continue
			fi
			[ -f "$link_target" ] || die "bad symlink: ${file} -> ${link_target}"
			file="$link_target"
		fi
		
		# Check that we didn't pick up a linker script instead of the actual library
		[[ "$(file -i "$file")" == *:\ text/* ]] && die "$file is a linker script"
		
		# Copy the library in our target directory
		e cp -a "$file" "${bindir}/"
		
		# Recursively get the library's dependencies
		e find_libraries "$bindir" "$file"
		
	done
}


get_max_symbol_versions() {
	local symvers=($(
		objdump -p "$1" \
			| tolower \
			| sed -n '/version references:/,$p' \
			| tail -n+2 \
			| grep '^    ' \
			| sed 's/.* //'
	))
	for symver in "${symvers[@]:+${symvers[@]}}" ; do
		library="${symver%_*}"
		version="${symver##*_}"
		[ "$library" = '' ] && continue
		[ "$version" = '' ] && continue
		required_symbol_versions["$library"]="$(
			version_max "${required_symbol_versions["$library"]-}" "$version"
		)"
		echo "$library $version -> ${required_symbol_versions["$library"]}"
	done
}


check_dependencies() {
	local arch="$1"
	
	local target="${targets["${pkgtype}-${arch}"]:-}"
	local toolchain="${toolchains["${pkgtype}-${arch}"]:-}"
	
	local root=''
	[ -z "$target" ] || root="${root_base}/${target}"
	
	local scriptbindir="$bindir"
	local bindir="${bindir}/${arch}"
	
	local builddir="${PWD}/build-${arch}"
	local rootdir="$builddir/root"
	
	local binroots=( )
	if [ -f "$rootdir/paths" ] ; then
		while IFS= read -r binroot ; do
			binroots+=( "$binroot" )
		done < <(cat "$rootdir/paths" | sort -rV | uniq)
	fi
	[ -z "$root" ] || binroots+=( "$root" )
	
	local binarch="$arch"
	[ -f "$rootdir/arch" ] && binarch="$(cat "$rootdir/arch")"
	local suffixes=(
		'' "$binarch"
		"bin" "bin/$binarch" "lib" "lib/$binarch"
		"usr/bin" "usr/bin/$binarch" "usr/lib" "usr/lib/$binarch"
	)
	
	# Get required libraries
	for binary in "${bindir}"/*  "${bindir}"/libexec/* ; do
		[ -f "$binary" ] || continue
		[[ "$binary" == *.lib ]] && continue
		[[ "$binary" == *.h ]] && continue
		e find_libraries "$bindir" "$binary"
	done
	
	# Remove debugging symbols to save disk space
	if [ ! -z "$target" ] ; then
		for binary in "${bindir}"/* "${bindir}"/libexec/* ; do
			[ -f "$binary" ] || continue
			[[ "$binary" == *.lib ]] && continue
			[[ "$binary" == *.h ]] && continue
		done
	fi
	
	# Sanity check: did we build all required libraries
	eval "local required_binaries_arch=( \"\${required_binaries[@]}\" \"\${required_binaries_${arch}[@]:+\${required_binaries_${arch}[@]}}\" )"
	for binary in "${required_binaries_arch[@]}" ; do
		[ -f "${bindir}/${binary}${exe_suffix}" ] \
			|| [ -f "${bindir}/libexec/${binary}${exe_suffix}" ] \
			|| [ -f "${scriptbindir}/${binary}${exe_suffix}" ] \
			|| [ -f "${scriptbindir}/libexec/${binary}${exe_suffix}" ] \
			|| die "missing ${binary}${exe_suffix} for ${arch}"
	done
	
	# Find required symbol versions
	declare -A required_symbol_versions
	for binary in "${bindir}"/* "${bindir}"/libexec/* ; do
		[ -f "$binary" ] || continue
		[[ "$binary" == *.lib ]] && continue
		[[ "$binary" == *.h ]] && continue
		[ -L "${binary}" ] || e get_max_symbol_versions "${binary}"
	done
	
	# Sanity check: did we get all required symbols
	for library in \
		"${required_versioned_libraries[@]:+${required_versioned_libraries[@]}}" ; do
		[ "${required_symbol_versions["$library"]-}" = '' ] \
			&& die "expected versioned symbols from $library"
	done
	
	# Check maximum versions
	for library in "${!required_symbol_versions[@]}" ; do
		local ver="${required_symbol_versions["$library"]}"
		local maxver="${maximum_library_versions["${library}-${arch}"]-}"
		[ "$maxver" = '' ] && maxver="${maximum_library_versions["$library"]-}"
		[ ! "$maxver" = '' ] \
			&& version_greater "$ver" "$maxver" \
			&& die "${library} ${ver} required, maximum allowed is ${maxver}"
	done
	
	# Force minimum required symbol versions
	for spec in "${!force_minimum_library_versions[@]}" ; do
		local library="${spec%%-*}"
		local sarch="${spec#"$library"}"
		[ "$sarch" = '' ] || [ "$sarch" = "-$arch" ] || continue
		local minver="${force_minimum_library_versions["$spec"]}"
		if version_greater "$minver" "${required_symbol_versions["$library"]-}" ; then
			required_symbol_versions["$library"]="$minver"
		fi
	done
	
	# Generate a list of required library versions
	local requirements=''
	for library in "${!required_symbol_versions[@]}" ; do
		match_in_array "${library}-${version}" \
			"${provided_versioned_libraries[@]:+${provided_versioned_libraries[@]}}" \
			&& continue
		[ "$requirements" = '' ] || requirements="${requirements}, "
		requirements="${requirements}${library} ${required_symbol_versions["$library"]}+"
	done
	[ "$requirements" = '' ] || echo "${arch}: ${requirements}" >> "$requirements_file"
	
}


# Get required libraries for all architectures
for architecture in "${architectures[@]}" ; do
	e check_dependencies "$architecture"
done


# Extract debug symbols into separate files
for architecture in "${architectures[@]}" ; do
	e extract_debug_symbols "$architecture"
done


# Copy binaries from other projects
for src_project in "${inherit_projects[@]:+${inherit_projects[@]}}" ; do
	e do_inherit_project "$src_project"
done
