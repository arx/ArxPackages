#!/bin/bash

## Compile binaries and get dependencies

# Generate a CMake toolchain file (wrapper)
generate_toolchain_file() {
	local file="$1"
	local target="$2"
	local root="$3"
	local system="$4"
	local toolchain="$5"
	local depsdir="$6"
	local compilerdir="$7"
	local rootdir="$8"
	
	echo -n '' > $file
	
	if [ -z "$toolchain" ] ; then
	echo "
# name of the target operating system
set(CMAKE_SYSTEM_NAME ${system})" >> "$file"
	fi
	
	if [ ! -z "$target" ] ; then
		echo "
# compilers to use for C and C++
set(CMAKE_C_COMPILER \"${target}-gcc\")
set(CMAKE_CXX_COMPILER \"${target}-g++\")" >> "$file"
		type "${target}-windres" &>/dev/null \
			&& echo "set(CMAKE_RC_COMPILER \"${target}-windres\")" >> "$file" || true
	fi
	
	if [ ! -z "$toolchain" ] ; then
		echo "
include(\"${toolchain_files["$toolchain"]}\")" >> "$file"
	fi
	
	if [ ! -z "$root" ] ; then
		echo "
# location of the target environment
set(CMAKE_SYSROOT \"${root}\")
set(CMAKE_FIND_ROOT_PATH \"${root}\")
# Also tell pkg-config because CMake doesn't
set(_cross_pkgconfig \"${root}/usr/lib/pkgconfig\")
set(_cross_pkgconfig \"${root}/usr/share/pkgconfig:\${_cross_pkgconfig}\")
set(ENV{PKG_CONFIG_LIBDIR} "\${_cross_pkgconfig}")
set(ENV{PKG_CONFIG_SYSROOT_DIR} \"${root}\")

# adjust the default behaviour of the find_xxx() commands:
# search headers and libraries in the target environment, search 
# programs in the host environment
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" >> "$file"
	fi
	
	echo "
set(depsdir \"$depsdir\")
set(compilerdir \"$compilerdir\")
set(rootdir \"$rootdir\")
include(\"${scriptdir}/toolchain-wrapper.cmake\")" >> "$file"
	
}

build() {
	local arch="$1"
	
	local osarch="${pkgtype//-/_}_${arch//-/_}"
	
	local target="${targets["${pkgtype}-${arch}"]:-}"
	local toolchain="${toolchains["${pkgtype}-${arch}"]:-}"
	
	local root=''
	[ -z "$target" ] || root="${root_base}/${target}"
	
	local bindir="${bindir}/${arch}"
	
	echo "  ${white}:: building for ${arch}${reset}" >&2
	echo "target=${target:-} toolchain=${toolchain:-} root=${root:-} bindir=${bindir:-}"
	
	local builddir="${PWD}/build-${arch}"
	e mkdir "$builddir"
	pushd "$builddir"
		
		local depsdir="$builddir/deps"
		[ -d "$depsdir" ] && rmdir -r "$depsdir"
		
		local rootdir="$builddir/root"
		mkdir -p "$rootdir"
		
		local compilerdir="$builddir/compiler"
		mkdir -p "$compilerdir"
		toolchain_file="$builddir/toolchain.cmake"
		e generate_toolchain_file "$toolchain_file" \
			"$target" "$root" "$cmake_platform" "$toolchain" "$depsdir" "$compilerdir" "$rootdir"
		
		# Set CMake options
		local options=(
			
			--no-warn-unused-cli
			-DCMAKE_TOOLCHAIN_FILE="$toolchain_file"
			-DCMAKE_BUILD_TYPE=Release
			
			-DCMAKE_INSTALL_PREFIX="${outdir}"
			-DCMAKE_INSTALL_DATAROOTDIR="${outdir}"
			-DCMAKE_INSTALL_MANDIR="${mandir}"
			-DCMAKE_INSTALL_BINDIR="${bindir}"
			-DCMAKE_INSTALL_LIBDIR="${bindir}"
			-DCMAKE_INSTALL_LIBEXECDIR="${bindir}/libexec"
			-DCMAKE_INSTALL_INCLUDEDIR="${bindir}/libexec"
			
			"${cmake_options[@]:+${cmake_options[@]}}"
			
		)
		
		eval "options+=( \"\${cmake_options_${osarch}[@]:+\${cmake_options_${osarch}[@]}}\" )"
		
		add_cmake_option() {
			local cmake_flag="$1"
			local name="$2"
			if [ -z "$toolchain" ] ; then
				local escaped_flags="$(
					eval escape_args \
						"\"\${${name}[@]:+\${${name}[@]}}\"" \
						"\"\${${name}_${osarch}[@]:+\${${name}_${osarch}[@]}}\""
				)"
			else
				local tcshort="${toolchain%%-*}"
				local tclong="${toolchain//-/_}"
				local escaped_flags="$(
					eval escape_args \
						"\"\${${name}_${tcshort}[@]:+\${${name}_${tcshort}[@]}}\"" \
						"\"\${${name}_${osarch}[@]:+\${${name}_${osarch}[@]}}\"" \
						"\"\${${name}_${tclong}[@]:+\${${name}_${tclong}[@]}}\""
				)"
			fi
			options+=( "${cmake_flag}=${escaped_flags}" )
		}
		
		add_cmake_option -DCMAKE_C_FLAGS_RELEASE     c_flags
		add_cmake_option -DCMAKE_CXX_FLAGS_RELEASE   cxx_flags
		add_cmake_option -DCMAKE_EXE_LINKER_FLAGS    exe_linker_flags
		add_cmake_option -DCMAKE_SHARED_LINKER_FLAGS shared_linker_flags
		
		VERBOSE=1 e cmake "${sourcedir}" "${options[@]}"
		
		mkdir -p "$depsdir"
		
		VERBOSE=1 e make -j1 #"$(getconf _NPROCESSORS_ONLN)"
		
		VERBOSE=1 e make install
		
	popd
	
	local binroots=( )
	if [ -f "$rootdir/paths" ] ; then
		while IFS= read -r binroot ; do
			binroots+=( "$binroot" )
		done < <(cat "$rootdir/paths" | sort -rV | uniq)
	fi
	[ -z "$root" ] || binroots+=( "$root" )
	
	
	# Copy binaries from the crossdev tree
	for target in "${copy_from_tree[@]:+${copy_from_tree[@]}}" ; do
		local type="${target%%/*}"
		target="${target#*/}"
		cmake "${options[@]}" -DTYPE="${type}" -DTARGET="${target}" -DLOGFILE="$depsdir/copy_from_tree" \
			-P "${scriptdir}/copy-from-tree.cmake"
	done
	
	# Get licenses for dependencies
	local license_outdir="${outdir}/license"
	while read dependency ; do
		
		[ -z "$dependency" ] && continue
		
		# Ignore dependencies from the build dir
		[ "$dependency" = "$builddir" ] && continue
		[[ "$dependency" == "$builddir"/* ]] && continue
		
		# Ignore dependencies from the source dir
		[ "$dependency" = "$sourcedir" ] && continue
		[[ "$dependency" == "$sourcedir"/* ]] && continue
		
		# Ignore dependencies from the build dir
		[ -f "${bindir}/${dependency}" ] && continue
		[ -f "${bindir}/libexec/${dependency}" ] && continue
		
		# Ignore dependencies from gcc
		[[ "$dependency" == /usr/lib/gcc/* ]] && continue
		
		local raw_dependency="$dependency"
		
		# All other dependencies should be in the build root
		if [[ "$dependency" == */* ]] ; then
			local found=0
			dependency="$(realpath "$dependency")"
			for binroot in "${binroots[@]:+${binroots[@]}}" ; do
				local realbinroot="$(realpath "$binroot")"
				[[ "$dependency" == "$realbinroot"/* ]] || continue
				dependency="${dependency#"$realbinroot"}"
				found=1
			done
			[ $found = 1 ] || die "dependency outside root: ${dependency}"
		fi
		
		local file="${dependency##*/}"
		[ "$case_insensitive_fs" = 1 ] && file="$(echo "$file" | tolower)"
		match_in_array "$file" "${system_libraries[@]:+${system_libraries[@]}}" && continue
		
		local license_found=0
		local license=''
		for pattern in "${!licenses[@]}" ; do
			if [[ "$dependency" == $pattern ]] || [[ "$raw_dependency" == $pattern ]] ; then
				license_found=1
				license="${licenses["$pattern"]}"
				break
			fi
		done
		
		if [ $license_found = 0 ] ; then
			
			# Ignore system stuff
			local package="$(qfile --nocolor "$raw_dependency")"
			package="${package%% *}"
			package="${package%%:*}"
			package="${package##*/}"
			
			match_in_array "$package" "${system_packages[@]:+${system_packages[@]}}" && continue
			
			[ "$package" = '' ] || die "no license for dependency: ${raw_dependency} = ${dependency} (${package})"
			die "no license for dependency: ${raw_dependency} = ${dependency}"
			
		fi
		[ "$license" = '' ] && continue
		
		mkdir -p "$license_outdir"
		
		local license_found=0
		for license_file in "${licensedir}/${license}".* ; do
			[ -f "$license_file" ] || continue
			license_found=1
			local license_outfile="${license_outdir}/${license_file##*/}${text_suffix}"
			[ -f "$license_outfile" ] || e cp "$license_file" "$license_outfile"
		done
		[ $license_found = 0 ] && die "missing license file for ${license}"
		
	done < <(cat "$depsdir"/* | sort | uniq)
	
	true
}


# Build binaries for all architectures
for architecture in "${architectures[@]}" ; do
	e build "$architecture"
done
