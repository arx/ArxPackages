#!/bin/bash

################################################################################
# Project configuration

project_name='Arx Libertatis'

# Git repository URL for the project source code
git_repository='git://github.com/arx/ArxLibertatis.git'

# URL for the project website
project_url='https://arx-libertatis.org/'

# Project description as in "$project_name, ..." (OPTIONAL)
project_tagline="a cross-platform, open source port of Arx Fatalis"

# URL for alternate downloads (OPTIONAL)
project_downloads_url='https://wiki.arx-libertatis.org/Download'

# URL for alternate snapshot download (OPTIONAL)
project_snapshot_downloads_url='https://wiki.arx-libertatis.org/Development_snapshots'

# URL for the full changelog (OPTIONAL)
project_changelog_url='https://wiki.arx-libertatis.org/Changelog'

# URL where output files can be accessed
project_files_url='https://arx-libertatis.org/files/'

# URL where commits can be accessed
project_commits_url='https://arx.vg/'

# GPG key id to sign builds with - empty key disables signing
sign_key='F87D7DF750859A5E' # release@arx-libertatis.org

################################################################################
# Build configuration

# Arx is not a small project, use better source compression
archives['source-build']='.tar.xz'

prepare_source() {
	
	# Include pre-built data files in the source tarball
	
	local version_file="$sourcedir/VERSION"
	[ -f "$version_file" ] || die "Could not find VERSION file in source tree!"
	data_version="$(
		grep -iP 'data version\:' "${version_file}" | sed 's/^.*://g;s/ //g'
	)"
	
	local data_archive
	local data_dir
	e get_output_of data_archive datadir 'arx-libertatis-data' "$data_version"
	[ -f "$data_archive" ] || die "Could not find archive for data version $data_version!"
	e extract "$data_archive"
	
	e rsync --archive --verbose \
		--exclude '/CHANGELOG*' \
		--exclude '/COPYING*' \
		--exclude '/LICENSE*' \
		--exclude '/README*' \
		--exclude '/VERSION*' \
		"$datadir/" "$sourcedir/data/"
	
	# Remove git build instructions
	
	e perl -0777 -pi -e 's/\n#+[^\n]* [gG]it( [^\n]*)?(\n[^#\n][^\n]*|\n(?=\n))*//g' \
		"$sourcedir/README.md"
	
}

# Additional options to pass to CMake
cmake_options+=(
	-DSTRICT_USE=1
	-DUSE_STATIC_LIBS=1
	-DBUILD_TOOLS_MERGED=1
	-DBUILD_CRASHREPORTER=1
	-DSCRIPTDIR='bin'
	-DAPPDIR='.'
	-DICONDIR='.'
	-DINSTALL_DATADIR='data'
	-DINSTALL_BLENDER_PLUGINDIR="plugins/blender/arx_addon"
	-DWITH_SDL=2
	-DWITH_QT=5
	-DWITH_OPENGL=epoxy
	-DRUNTIME_LIBEXECDIR=".${env_separator}.."
	-DRUNTIME_DATADIR=".${env_separator}..${env_separator}../.."
)

if [ $is_snapshot = 1 ] && [ $is_release_candidate = 0 ] ; then
	cmake_options+=(
		-DDEBUG=1
		-DDEBUG_GL=0
	)
fi

copy_from_tree+=(
	'share/openal/hrtf'
)

copy_files+=(
	
	# Create a data subdirectory (with a README)
	[':data/README.md']='data/'
	
)

################################################################################
# Wrapper configuration

# Set ${command}_COMMAND to the string used to invoke the wrapper script
wrapper_use_command=1

# Not needed since arx binaries know to use relative paths for helpers and data directories
wrapper_use_path=0
wrapper_use_cmd_path=0

launchers=(
	[arx-portable]='"arx" --no-data-dir --data-dir="$here" --user-dir="$here" --config-dir="$here"'
)

################################################################################
# Adjust documentation

readme_transforms+=(
	--append-file '* data * locations *' "$filesdir/README.data.md"
)

################################################################################
# Sanity checks

# List of binaries that must be present in binary packages
required_binaries+=(
	arx
)

# Libraries that should not be linked
forbidden_libraries+=(
	
	# C++ stdlib - link statically (they may conflict with GL drivers)
	'libstdc++.so*'
	'libstdc++-*.dll'
	'libc++.so*'
	'libgcc*.so*'
	
	# We link Boost, GLEW, libepoxy, FreeType and ZLIB statically - check for that
	'libboost_*'
	'libGLEW*'
	'glew*'
	'libepoxy*'
	'epoxy*'
	'libfreetype*'
	'freetype*'
	'libz.so*'
	'zlib*'
	
	# Check that Qt was linked statically
	'libicu*'
	'icu*.dll'
	'*Qt5Core*'
	'*Qt5Gui*'
	'*Qt5Widgets*'
	
	# Epoxy and SDL should load libGL dynamically
	'libGL.so*'
	'OpenGL32.dll'
	
)

test_binaries() {
	
	# Test that the program runs at all
	expect_success arx --help
	expect_success arx --list-dirs
	
	[ $pkgtype = windows ] && [ ! $arch = x86 ] && return
	
	# Test that the program runs at all
	local arxunpak=( arxunpak )
	[ $pkgtype = windows ] && arxunpak=( arxtool unpak )
	expect_success "${arxunpak[@]}" --help
	expect_success "${arxunpak[@]}" --list-dirs
	expect_failure "${arxunpak[@]}" --unknown-option
	
	# Exit code 1 if no files given
	local arxsavetool=( arxsavetool )
	[ $pkgtype = windows ] && arxsavetool=( arxtool save )
	expect_failure "${arxsavetool[@]}"
	
	true
}

echo "${version:-kek}" | grep -P '^\d+\.\d+$' > /dev/null && codename_required=1

launchpad_builds['trusty']='binary'
launchpad_builds['xenial']='binary'
launchpad_builds['bionic']='binary'

obs_bin_rpm=1

obs_bin_deb=1
